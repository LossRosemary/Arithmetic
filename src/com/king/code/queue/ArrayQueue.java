package com.king.code.queue;

//笔记：
//		循环队列的元素总数为 maxSize
//		front 指向队列的第一个元素的前一个位置
//		rear 指向队列最后一个元素
//		队空：front = rear
//		队满：rear = maxSize - 1;

//		向队列添加元素（入队）：rear++; arr[rear] = n;
//		向队列取出元素（出队）：front++; return arr[front];
//		遍历：for (int i = front + 1; i < arr.length; i++)

public class ArrayQueue {

	// 使用数组模拟队列 --- 编写一个ArrayQueue类
	private int maxSize; // 表示数组最大容量
	private int front; // 队列头
	private int rear; // 队列尾
	private int[] arr; // 该数组用于存放数据

	// 创建队列的构造器
	public ArrayQueue(int arrMaxSize) {
		maxSize = arrMaxSize;
		arr = new int[maxSize];
		front = -1; // 指向队列头部，front是指向队列头的一个位置
		rear = -1; // 指向队列尾部，指向队列尾的数据（即就是队列最后一个位置）
	}

	// 判断队列是否满
	public boolean isFull() {
		return rear == maxSize - 1;
	}

	// 判断队列是否为空
	public boolean isEmpty() {
		return rear == front;
	}

	// 添加数据到队列
	public void addQueue(int n) {
		// 判断队列是否满
		if (isFull()) {
			System.out.println("队列满，不能加入数据！！！");
			return;
		}
		rear++; // rear后移
		arr[rear] = n;
	}

	// 获取队列的数据，出队列
	public int getQueue() {
		// 判断队列是否空
		if (isEmpty()) {
			// 抛异常
			throw new RuntimeException("队列空，不能获取数据");
		}

		front++; // front后移
		return arr[front];
	}

	// 显示队列所有数据
	public void showQueue() {
		// 遍历
		if (isEmpty()) {
			System.out.println("队列空，没有数据~~~");
		}
		for (int i = front + 1; i < arr.length; i++) {
			System.out.printf("arr[%d]=%d\n", i, arr[i]);
		}

	}

	// 显示队列的头数据，注意：不是取出数据
	public int headQueue() {
		// 判断
		if (isEmpty()) {
			throw new RuntimeException("队列空的，没有数据");
		}
		return arr[front + 1];
	}

}
